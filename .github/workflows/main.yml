name: Release Creation

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
     # - name: Extract branch name
     #   shell: bash
     #   run: echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
     #   id: branch_name
      - name: Get Branch
        id: branch_name
        run: |
         raw=$(git branch -r --contains ${{ github.ref }})
         branch=${raw/origin\/}
         echo ##[set-output name=branch;]$branch
      # Substitute the Manifest and Download URLs in the module.json
      # for a FULL RELEASE
      - name: Substitute Manifest and Download Links For Versioned Ones
        if: "!github.event.release.prerelease"
        id: sub_release_manifest_version
        uses: microsoft/variable-substitution@v1
        with:
          files: 'module.json'
        env:
          version: ${{github.event.release.tag_name}}
          url: https://github.com/${{github.repository}}
          manifest: https://github.com/${{github.repository}}/releases/latest/download/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip
      # Substitute the Manifest and Download URLs in the module.json
      # for a PRE RELEASE. Manifest pointing to live module.json on branch,
      # which is updated before tag.
      - name: Substitute Manifest and Download Links For Versioned Ones
        if: "github.event.release.prerelease"
        id: sub_prerelease_manifest_version
        uses: microsoft/variable-substitution@v1
        with:
          files: 'module.json'
        env:
          version: ${{github.event.release.tag_name}}
          url: https://github.com/${{github.repository}}
          manifest: https://raw.githubusercontent.com/${{github.repository}}/${{steps.branch_name.outputs.branch}}/module.json
          download: https://github.com/${{github.repository}}/releases/download/${{github.event.release.tag_name}}/module.zip
      
      # Pre-release: commit module.json so latest download is updated
      - name: Update Live Pre-release Manifest
        if: "github.event.release.prerelease"
        id: update_prerel_manifest
        uses: actions-js/push@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          message: '${{github.event.release.tag_name}} preview manifest'
          branch: '${{steps.branch_name.outputs.branch}}'
      # Create a zip file with all files required by the module to add to the release
      - run: zip -r ./module.zip module.json LICENSE scripts/ lang/ 

      # Create a release for this specific version
      - name: Update Release with Files
        if: "!github.event.release.prerelease"
        id: create_version_release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true # Set this to false if you want to prevent updating existing releases
          name: ${{ github.event.release.name }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './module.json, ./module.zip'
          tag: ${{ github.event.release.tag_name }}
          body: ${{ github.event.release.body }}
      #  OR create a pre-release for this specific version
      - name: Update Release with Files
        if: "github.event.release.prerelease"
        id: create_version_prerelease
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true # Set this to false if you want to prevent updating existing releases
          name: ${{ github.event.release.name }}
          draft: false
          prerelease: true
          token: ${{ secrets.GITHUB_TOKEN }}
          artifacts: './module.json, ./module.zip'
          tag: ${{ github.event.release.tag_name }}
          body: ${{ github.event.release.body }}
